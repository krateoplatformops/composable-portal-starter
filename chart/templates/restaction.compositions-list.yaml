apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: compositions-list
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: allNamespacesAndCrds
    path: "/call?apiVersion=templates.krateo.io%2Fv1&resource=restactions&name=compositions-get-ns-and-crd&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: allNamespacesAndCrdsError
    exportJwt: true
  - name: allCompositions
    dependsOn: 
      name: allNamespacesAndCrds
      iterator: ".allNamespacesAndCrds.status"
    path: ${ "/apis/composition.krateo.io/" + (.version) + "/namespaces/" + (.namespace) + "/" + (.plural) }
    verb: GET 
    continueOnError: true
    errorKey: allCompositionsError
  filter: >
    {
      total: (
        [.allCompositions[]?.items[]?] | length
      ),
      data: [
        {
          color: "green",
          value: (
            [.allCompositions[]?.items[]?
              | select((.status.conditions // [])
                  | map(select(.type == "Ready" and .status == "True"))
                  | length > 0)
            ]
            | length
          ),
          label: "Ready:True"
        },
        {
          color: "orange",
          value: (
            [.allCompositions[]?.items[]?
              | select((.status.conditions // [])
                  | map(select(.type == "Ready" and .status == "False"))
                  | length > 0)
            ]
            | length
          ),
          label: "Ready:False"
        },
        {
          color: "gray",
          value: (
            [.allCompositions[]?.items[]?
              | select((.status.conditions // [])
                  | map(select(.type == "Ready" and (.status == "True" or .status == "False")))
                  | length == 0)
            ]
            | length
          ),
          label: "Unknown"
        }
      ],
      list: (
        [(.allCompositions // [])[]
          | (.items // [])
          | .[]
          | {
              key: .metadata.uid,
              name: .metadata.name,
              namespace: .metadata.namespace,
              date: .metadata.creationTimestamp,
              status: (
                if (.status? and .status.conditions?) then
                  (
                    (.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status)?
                    // (.status.conditions[]? | select(.type == "Synced") | "Synced: " + (.message // "Unknown"))
                    // "Status not available"
                  )
                else
                  "Status not available"
                end
              )
            }
        ]
        | sort_by(.date)
        | reverse
      )
    }

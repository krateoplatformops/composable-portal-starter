apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: templates-list
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - filter: '[.items[] | .metadata.name]'
    name: namespaces
    path: /api/v1/namespaces
  - continueOnError: true
    dependsOn:
      iterator: .[]
      name: namespaces
    name: allCompositionDefinitions
    path: ${ "/apis/core.krateo.io/v1alpha1/namespaces/" + (.) + "/compositiondefinitions"}
  filter: >
    {
      total: (
        .allCompositionDefinitions
        | map((.items // []) | length)
        | add
      ),
      data: [
        {
          color: "green",
          value: (
            [.allCompositionDefinitions[]
              | (.items // [])
              | .[]
              | select(((.status // {})?.conditions? // [])
                | map(select(.type == "Ready" and .status == "True"))
                | length > 0)
            ]
            | length
          ),
          label: "Ready:True"
        },
        {
          color: "orange",
          value: (
            [.allCompositionDefinitions[]
              | (.items // [])
              | .[]
              | select(((.status // {})?.conditions? // [])
                | map(select(.type == "Ready" and .status == "False"))
                | length > 0)
            ]
            | length
          ),
          label: "Ready:False"
        },
        {
          color: "gray",
          value: (
            (.allCompositionDefinitions
              | map((.items // []) | length)
              | add)
            - ([.allCompositionDefinitions[]
                  | (.items // [])
                  | .[]
                  | select(((.status // {})?.conditions? // [])
                    | map(select(.type == "Ready" and .status == "True"))
                    | length > 0)
              ]
              | length)
            - ([.allCompositionDefinitions[]
                  | (.items // [])
                  | .[]
                  | select(((.status // {})?.conditions? // [])
                    | map(select(.type == "Ready" and .status == "False"))
                    | length > 0)
              ]
              | length)
          ),
          label: "Unknown"
        }
      ],
      list: (
        [.allCompositionDefinitions[]
          | (.items // [])
          | .[]
          | {
              key: .metadata.uid,
              name: .metadata.name,
              namespace: .metadata.namespace,
              date: .metadata.creationTimestamp,
              status: (
                if (.status? and .status.conditions?) then
                  (
                    (.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status)?
                    // (.status.conditions[]? | select(.type == "Synced") | "Synced: " + (.message // "Unknown"))
                    // "Status not available"
                  )
                else
                  "Status not available"
                end
              )
            }
        ]
        | sort_by(.date)
        | reverse
      )
    }


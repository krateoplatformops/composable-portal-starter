apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: blueprints-list
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - filter: '[.items[] | .metadata.name]'
    name: namespaces
    path: /api/v1/namespaces
  - continueOnError: true
    dependsOn:
      iterator: .[]
      name: namespaces
    name: allCompositionDefinitions
    path: ${ "/apis/core.krateo.io/v1alpha1/namespaces/" + (.) + "/compositiondefinitions"}
  filter: >
    {
      total: (
        (
          if (.allCompositionDefinitions | type) == "array" then
            [.allCompositionDefinitions[]?.items[]?]
          elif (.allCompositionDefinitions | type) == "object" then
            [.allCompositionDefinitions.items[]?]
          else
            []
          end
        | length)
      ),
      data: [
        {
          color: "green",
          value: (
            (
              if (.allCompositionDefinitions | type) == "array" then
                [.allCompositionDefinitions[]?.items[]?]
              elif (.allCompositionDefinitions | type) == "object" then
                [.allCompositionDefinitions.items[]?]
              else
                []
              end
            | map(select((.status.conditions // [])
              | map(select(.type == "Ready" and .status == "True"))
              | length > 0))
            | length)
          ),
          label: "Ready:True"
        },
        {
          color: "orange",
          value: (
            (
              if (.allCompositionDefinitions | type) == "array" then
                [.allCompositionDefinitions[]?.items[]?]
              elif (.allCompositionDefinitions | type) == "object" then
                [.allCompositionDefinitions.items[]?]
              else
                []
              end
            | map(select((.status.conditions // [])
              | map(select(.type == "Ready" and .status == "False"))
              | length > 0))
            | length)
          ),
          label: "Ready:False"
        },
        {
          color: "gray",
          value: (
            (
              if (.allCompositionDefinitions | type) == "array" then
                [.allCompositionDefinitions[]?.items[]?]
              elif (.allCompositionDefinitions | type) == "object" then
                [.allCompositionDefinitions.items[]?]
              else
                []
              end
            | map(select((.status.conditions // [])
              | map(select(.type == "Ready" and (.status == "True" or .status == "False")))
              | length == 0))
            | length)
          ),
          label: "Unknown"
        }
      ],
      list: (
        (
          if (.allCompositionDefinitions | type) == "array" then
            [.allCompositionDefinitions[]?.items[]?]
          elif (.allCompositionDefinitions | type) == "object" then
            [.allCompositionDefinitions.items[]?]
          else
            []
          end
        | map({
            key: .metadata.uid,
            name: .metadata.name,
            namespace: .metadata.namespace,
            date: .metadata.creationTimestamp,
            status: (
              if (.status? and .status.conditions?) then
                (.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status)?
              else
                "Status not available"
              end
            )
          })
        | sort_by(.date)
        | reverse)
      )
    }


